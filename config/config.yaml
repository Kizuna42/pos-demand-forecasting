data:
  raw_data_path: "data/raw/納品用_20240101_20241231_生鮮全品data.csv"
  encoding: "shift_jis"
  processed_data_path: "data/processed"

feature_engineering:
  baseline_features:
    - "売上単価"
    - "月"
    - "曜日"
    - "週末フラグ"

  time_features:
    enable_time_assignment: false
    enable_congestion: true
    time_distribution_type: "bimodal"

  weather_features:
    enable_weather_api: true
    api_endpoint: "https://api.open-meteo.com/v1/forecast"
    location: "Tokyo"

model:
  algorithm: "ensemble" # RandomForest, XGBoost, ensemble

  # RandomForest設定（過学習抑制強化: 複雑度削減）
  n_estimators: 100 # 150 → 100 に削減
  max_depth: 5 # 8 → 5 に制限（重要: 過学習抑制）
  min_samples_split: 10 # 5 → 10 に増加（汎化性向上）
  min_samples_leaf: 5 # 2 → 5 に増加（汎化性向上）
  max_features: "sqrt" # 維持

  # XGBoost設定（強力な正則化パラメータ）
  xgb_n_estimators: 80 # 100 → 80 に削減
  xgb_max_depth: 4 # 6 → 4 に制限（重要: 過学習抑制）
  xgb_learning_rate: 0.05 # 0.1 → 0.05（より慎重な学習）
  xgb_reg_alpha: 1.0 # 0.1 → 1.0 L1正則化強化
  xgb_reg_lambda: 3.0 # 1.0 → 3.0 L2正則化強化
  xgb_subsample: 0.7 # 0.8 → 0.7（より厳しいサンプリング）
  xgb_colsample_bytree: 0.7 # 0.8 → 0.7（特徴量サンプリング強化）

  random_state: 42
  cv_folds: 5

quality:
  thresholds:
    premium: 0.7
    standard: 0.5
    basic: 0.3

  # 過学習抑制とリアリズムのための制限
  overfitting_threshold: 0.01
  max_r2_score: 0.90 # R²スコア上限（過度な精度の防止）
  min_cv_stability: 0.8 # CV安定性の最低基準
  max_train_test_gap: 0.05 # 訓練/テスト性能差の上限

visualization:
  output_dir: "output/visualizations"
  dpi: 300
  style: "want_style"

logging:
  level: "INFO"
  format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
  file: "logs/demand_forecasting.log"
